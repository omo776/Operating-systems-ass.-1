Problem Statement – We have a buffer of fixed size. A producer can produce an item and can place in the buffer.
A consumer can pick items and can consume them. We need to ensure that when a producer is placing an item in the buffer, then at the same
time consumer should not consume any item. In this problem, buffer is the critical section.

To solve this problem, we need two counting semaphores – Full and Empty. “Full” keeps track of number of items in the buffer at any given
time and “Empty” keeps track of number of unoccupied slots. 
Initialization of semaphores – 
mutex = 1 
Full = 0 // Initially, all slots are empty. Thus full slots are 0 
Empty = n // All slots are empty initially

Solution for Producer:
do{

  //produce an item

  wait(empty);
  wait(mutex);

  //place in buffer

  signal(mutex);
  signal(full);

}while(true)


/******/
When producer produces an item then the value of “empty” is reduced by 1 because one slot will be filled now. The value of mutex is also
reduced to prevent consumer to access the buffer. Now, the producer has placed the item and thus the value of “full” is increased by 1.
The value of mutex is also increased by 1 because the task of producer has been completed and consumer can access the buffer. 

Solution for Consumer:
do{

  wait(full);
  wait(mutex);

  //consume item from buffer

  signal(mutex);
  signal(empty);
  
}while(true)

As the consumer is removing an item from buffer, therefore the value of “full” is reduced by 1 and the value is mutex is also reduced so
that the producer cannot access the buffer at this moment. Now, the consumer has consumed the item, thus increasing the value of “empty”
by 1. The value of mutex is also increased so that producer can access the buffer now. 


/*********/
In the Producer class, the value is initialized as 0.
We have an infinite outer loop to insert values in the list. Inside this loop, we have a synchronized block so that only a producer or a consumer thread runs at a time.
An inner loop is there before adding the jobs to the list that checks if the job list is full, the producer thread gives up the intrinsic look on the PC and goes into the waiting state.
If the list is empty, the control passes below the loop and adds a value to the list.
In the Consumer class, we again have an infinite loop to extract a value from the list.
Inside, we also have an inner loop that checks if the list is empty.
If it is empty then we make the consumer thread give up the lock on the PC and pass the control to the producer thread for producing more jobs.
If the list is not empty, we go around the loop and remove an item from the list.



producer produced-0
producer produced-1
consumer consumed-0
consumer consumed-1
producer produced-2
